/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 //Time Complexity O(n)
 //Time Complexity O(n)
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root == null){
            return false;
        }
        Queue<TreeNode> q = new LinkedList<>();
        boolean xFound = false;
        boolean yFound = false;
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                    TreeNode curr = q.poll();
                    if(curr.left != null && curr.right != null){
                        if(curr.left.val == x && curr.right.val == y){
                            return false; // child of same parent can not be cousin
                        }
                        if(curr.left.val == y && curr.right.val ==x){
                            return false; //child of same parent can not be cousin 
                        }
                    }
                    if(curr.val ==x){
                        xFound = true;
                    }
                    if(curr.val == y){
                        yFound = true;
                    }
                    if(curr.left != null){
                        q.add(curr.left);
                    }
                    if(curr.right != null){
                        q.add(curr.right);
                    }
            }
            if(xFound == true && yFound == true){
                return true;
            }
            if(xFound == true || yFound == true){
                return false;
            }
        }
       return true;
    }
}
